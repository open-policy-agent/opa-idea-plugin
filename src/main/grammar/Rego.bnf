/*
 * Use of this source code is governed by the MIT license that can be
 * found in the LICENSE file.
 */

{
  parserClass="org.openpolicyagent.ideaplugin.lang.parser.RegoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Rego"
  psiImplClassSuffix="Impl"
  psiPackage= "org.openpolicyagent.ideaplugin.lang.psi"
  psiImplPackage="org.openpolicyagent.ideaplugin.lang.psi.impl"

  elementTypeHolderClass="org.openpolicyagent.ideaplugin.lang.psi.RegoTypes"
  elementTypeClass="org.openpolicyagent.ideaplugin.lang.psi.RegoElementType"
  tokenTypeClass="org.openpolicyagent.ideaplugin.lang.psi.RegoTokenType"

  tokens = [
        PACKAGE_TOKEN       = 'package'
        IMPORT_TOKEN        = 'import'
        AS                  = 'as'
        DEFAULT             = 'default'
        VAR_ASSIGN          = ':='
        UNIFICATION         = '='
        TRUE                = 'true'
        FALSE               = 'false'
        LPAREN              = '('
        RPAREN              = ')'
        LBRACK              = '['
        RBRACK              = ']'
        ELSE                = 'else'
        LBRACE              = '{'
        RBRACE              = '}'
        SEMICOLON           = ';'
        SOME                = 'some'
        COMMA               = ','
        DOT                 = '.'
        NOT                 = 'not'
        WITH                = 'with'
        COLLON              = ':'
        EQ                  = '=='
        NOT_EQ              = '!='
        LESS_OR_EQUAL       = '<='
        GREATER_OR_EQUAL    = '>='
        GREATHER            = '>'
        LESS                = '<'
        BIT_OR              = '|'
        BIT_AND             = '&'
        PLUS                = '+'
        MINUS               = '-'
        MUL                 = '*'
        QUOTIENT            = '/'
        REMAINDER           = '%'
        SET_OPEN            = 'set('
        BACKSTRICK          = '`'
        NULL                = 'null'
        ASCII_LETTER         = 'regexp:[A-Za-z_][A-Za-z_0-9]*'
        NUMBER              = 'regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'
        WHITE_SPACE               = 'regexp:\s+'
        STRING_TOKEN        = 'regexp:"[^"]*"' // todo fix me
        RAW_STRING          = 'regexp:`[^`]*`'
        COMMENT             = 'regexp:[ \t]*#[^\r\n]*'
    ]
}
module          ::= package import*  policy
package         ::= "package" ref
import          ::= "import" ref ( "as" var )?
policy          ::=  rule*
rule            ::=  "default"?  rule-head  rule-body*
rule-head       ::= var ( "(" rule-args ")" )? ("[" term "]" )? ( ( ":=" | "=" ) term )?
rule-args       ::= term ( "," term )*
rule-body       ::= ( else ( "=" term )? )? "{" query "}"
query           ::=( literal |';' )+
literal         ::= ( some-decl | expr | "not" expr )  with-modifier*
with-modifier   ::= "with" term "as" term
some-decl       ::= "some" var ( "," var )*
expr            ::=  expr2  ((':=' | '=') expr2)?
expr2           ::=  expr-infix | expr-call   | term
expr-call       ::= var ( "." var )? "(" ( term ( "," term )* )? ")"
expr-infix      ::= ( term "=" )? term infix-operator term
term            ::= ref | var | scalar | array | object | set | array-compr | object-compr | set-compr
array-compr     ::= "[" term "|" query "]"
set-compr       ::= "{" term "|" query "}"
object-compr    ::= "{" object-item "|" query "}"
infix-operator  ::= bool-operator | arith-operator | bin-operator
bool-operator   ::= "==" | "!=" | "<" | ">" | ">=" | "<="
arith-operator  ::= "+" | "-" | "*" | "/"
bin-operator    ::= "&" | "|"
ref             ::= ( expr-call  | array | object | set | array-compr | object-compr | set-compr |var  )  ref-arg*
ref-arg         ::= ref-arg-dot | ref-arg-brack
ref-arg-brack   ::= "[" ( scalar | var | array | object | set | "_" ) "]"
ref-arg-dot     ::= "." var
var             ::= ASCII_LETTER
scalar          ::= string | NUMBER | TRUE | FALSE | NULL
string          ::= STRING_TOKEN| RAW_STRING
array           ::= '[' term? ( ',' term )* ','? ']'
object          ::= '{' object-item? ( ',' object-item )* ','? '}'
object-item     ::= ( scalar | ref | var ) ":" term
set             ::= empty-set | non-empty-set
non-empty-set   ::= "{" term ( "," term )* ','?  "}"
empty-set       ::= "set(" ")"

